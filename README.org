#+TITLE: ~dw~: A Diceware Passphrase Generator for Emacs
#+STARTUP: showall

[[file:https://imgs.xkcd.com/comics/password_strength.png]]

* Table of Contents
  * [[#About][About]]
  * [[#how-to-use-this-package][How to use this package]]
  * [[#Installation][Installation]]
  * [[#Customization][Customization]]

* About
  :PROPERTIES:
  :CUSTOM_ID: About
  :END:
  This package provides a basic implementation of the [[http://world.std.com/~reinhold/diceware.html][diceware]] method
  of passphrase generation, by Arnold G. Reinhold.  If you are new to
  diceware, *please read the subsections below, or check out the link
  above*.

** What is diceware?
   In short, diceware is a way of generating secure passphrases.
   While this README will briefly describe the basics, it does not try
   and replicate the original [[https://theworld.com/~reinhold/diceware.html][home page]].

** What is a passphrase, and why should I use it?
   If a password is a sequence of random characters, a passphrase is
   simply a sequence of random words.  In this context, a "word" can
   be a proper word from a real language, or a short sequence of
   random characters.  See the above comic for a simple example of
   (bad) passwords versus simple passphrases.  A few of the selling
   points of passphrases are:

   * They are easier to memorize.
   * They are easy to generate (even without this package).
   * They are prescriptive: Roll dice, read list, write down.  No
     voodoo.

** What is a wordlist and why do I need one?
   Unlike passwords, which draw from a random pool of characters for
   security, diceware passphrases draw from a random pool of words.  A
   wordlist associates five die rolls with a single word, meaning
   every regular wordlist is 6^5 or *7776* words long.  While there are
   wordlists with fewer dice, I see very little point supporting them,
   as it just means having to roll more words for the same security.
   While there are fancy wordlists in PDF and other formats, ~dw~ is
   limited to plain text.  Here is a small excerpt from one of the
   wordlists linked in the [[#Installation][Installation]] section, as a simple example
   of how a wordlist looks like:

   #+begin_example
   36166	limb
   36211	limeade
   36212	limelight
   36213	limes
   36214	limit
   36215	limping
   36216	limpness
   36221	line
   36222	lingo
   36223	linguini
   #+end_example

   And so on.  In other words, a wordlist is a plain text file where
   each line begins with a unique sequence of dice rolls, followed by
   whitespace, and the word to replace the specific result with.

** What makes a passphrase secure?
   As described above, a passphrase draws from a pool of random words,
   not random characters.  A simple way of measuring security is
   called /entropy/, which is defined as the base 2 logarithm of the
   number of possible outcomes for a generated passphrase.  So it
   essentially measures the expected order or magnitude of guesses an
   attacker would need /even if/ they knew how the passphrase was
   generated.  Since the number of possibilities grows
   multiplicatively with the number of words added, the entropy grows
   additively.  A password generated by picking a sequence of one of
   the 95 printable ASCII characters has ~log2(95)~ or \approx6.6 "bits" of
   entropy per character.  Likewise, a passphrase has ~5*log2(6)~ or
   \approx12.9 bits of entropy per word, meaning a six-word passphrase is
   about the same quality as a perfectly random string of 12 printable
   characters, a seven word passphrase is equivalent to 14.  The
   trade-off that arises is between having to /type/ "fill 33rd chi
   drury behind chick fade" and having to /remember/ "9W]OZ<D`zBnDpf".

** What are the limitations of diceware?
   There are two relevant factors: one is arbitrary restrictions on
   characters (meaning if you need numerals/special
   characters/uppercase letters you need extra steps) and the other is
   a limited password length.  If the system you need a password for
   does not let you exceed a limit of 15 characters, you're basically
   stuck with random characters strings and ideally drawing from a
   large alphabet of characters.

   *Remark:* If your passphrase approximates a known phrase, drop it,
   and re-roll.  The chance of such a passphrase being generated is
   astronomically low, but every sensible attacking strategy would try
   common phrases.

** Can't I just guess numbers instead of rolling dice?
   *NO*.  The human perception of randomness is immensely skewed, and
   rather predictable.  Humans are too good at recognizing patterns,
   so people are less likely to reply "22226" when asked for a random
   sequence than for example "13426" because it feels somehow "more
   random".  The diceware homepage (linked above) also has
   recommendations for cases where dice are not available (but for
   example coins).

* How to use this package
  :PROPERTIES:
  :CUSTOM_ID: how-to-use-this-package
  :END:
  Once the package is set up (see [[#Installation][Installation]]), using it boils down
  two three simple steps:

  1) Open a temporary buffer. For example, =C-x b dice RET= opens a
     buffer called =dice=.  This way you can easily dispose of the
     buffer once you got your passphrase and discard it.
  2) Roll dice, reading them in some consistent way (e.g. left to
     right) every time, and typing them neatly separated in groups of
     five.  You can separate them using any character matched by
     ~dw-separator-regexp~ (whitespace by default).  For example, if you
     rolled ⚄⚂⚀⚅⚅, type =53166=.  You will need five times as many die
     rolls as you want words in your passphrase (six being a decent
     amount for normal passphrases).
  3) Mark the region where you wrote down your sequence of rolls and
     execute =M-x dw-passgen-region=.  You may need to choose a wordlist
     depending on your setup (see [[#Customization][Customization]] below for how to skip
     this step and set up a default wordlist).

     And you're done!  Copy the passphrase into a safe location, kill
     the buffer, and potentially purge the passphrase from your kill
     ring.  If it is /really/ important, write it down and store it with
     other sensitive documents.

* Installation
  :PROPERTIES:
  :CUSTOM_ID: Installation
  :END:

  Since this packages relies on external files, a minimum installation
  requires two (plus a third, optional) steps:

  1) Put =dw.el= into your load path.
  2) Put a wordlist for passphrase generation into the directory
     specified by ~dw-directory~ (see the section [[#Customization][Customization]] for
     more).  You can find English wordlists [[https://www.eff.org/files/2016/07/18/eff_large_wordlist.txt][here]] and [[http://world.std.com/%7Ereinhold/diceware.wordlist.asc][here]].  The former
     generates passphrases with long, common words while the latter
     favors short words and letter combinations, which may be harder
     to remember but quicker to type.  You can find wordlists for many
     other languages [[http://world.std.com/~reinhold/diceware.html#Diceware%20in%20Other%20Languages|outline][here]].  See the section [[Wordlists]] for more details
     on what kind of wordlists =dw= expects.
  3) /(optional)/ Set up ~dw-named-wordlists~ (see the section
     [[#Customization][Customization]] below).

* Customization
  :PROPERTIES:
  :CUSTOM_ID: Customization
  :END:

** ~dw-directory~
   The wordlist directory.  Upon load, this package automatically
   generates whichever directory this variable is set to, if it
   doesn't exist yet.  The default directory is =~/.emacs.d/diceware=,
   or a system-specific equivalent thereof.  You can either customize
   or set this variable manually.

   *Note:* Setting this variable outside of custom (for example with
   ~setq~) must be done /before/ the package is loaded if you want to have
   the directory auto-generated.  Otherwise, =dw= will generate the
   default directory instead.

** ~dw-named-wordlists~
   By default, ~dw-passgen-region~ will prompt you for a wordlist file
   to use.  However, most of the time you'll want to use the same
   wordlist.  For this reason, this package lets you define /named
   wordlists/ to speed up the selection process.

   ~dw-named-wordlists~ is an association list where each entry is of
   the form ~(NAME FILE . CODING)~ or simply ~(NAME FILE)~.  ~NAME~ should
   be a symbol.  ~FILE~ should be the filename of the wordlist, either
   relative to ~dw-directory~ or absolute.  ~CODING~ should be the
   encoding of the file, with ~nil~ being treated as ~utf-8~.

   The symbol ~default~ is a special wordlist name: if used, this
   wordlist will be selected by default without prompting the user.

** ~dw-separator-regexp~
   Regular expression matching a single separator character.  All
   characters matching this regexp are ignored when reading die rolls,
   making them valid separators for noting down.  Separators are
   useful for visually grouping die rolls.  For example, the string

   "13524 23621 63622"

   is more clearly a set of 15 die rolls than "135242362163622".
   Customize this value to include whichever characters you fancy.
   For example, use ~"\\(\\s-\\|[.,-]\\)"~ to also allow for periods,
   dashes and commas.

** ~dw-passphrase-separator~
   By default, the words making up the passphrase generated by
   ~dw-passgen-region~ are separated by spaces.  This is done to prevent
   word collisions (cases where two words concatenated yield another
   valid word, like "in"+"put" \to "input").  You can change the
   separator by setting this variable, or omitting it entirely (using
   the empty string).  Ultimately, the choice of separator makes very
   little difference.  It is, however, best to choose a separator /once/
   and stick to it, or else it becomes additional needless information
   to memorize, which the diceware method tries to keep to a minimum.

** ~dw-capitalize-words~
   One of the more common restrictions put on passphrases is the
   requirement of at least one capital letter.  However, the entropy
   gained from random capitalization is not worth the effort unless
   you are dealing with a tight character limit for your passphrase
   (at which point you are basically stuck using random character
   strings for decent security anyway).  So this option simply
   capitalizes every word in your passphrase.  As with setting a
   separator (see above), you should use /one/ way of capitalization and
   stick to it.  It makes no sense to change this variable often, as
   this turns a convenience into a burden to remember.

   *Remark:* The [[http://world.std.com/%7Ereinhold/dicewarefaq.html][original FAQ]] recommends randomly capitalizing one word
   in the passphrase to fulfill this condition.  Since there is hardly
   a way to implement this in a way taking fewer key strokes than it
   would take to do it manually, this option is not implemented.

** ~dw-minimum-word-count~
   As technology marches on, passphrases need to become harder to
   guess to prove effective.  This variable ensures that you don't
   create an insufficiently long passphrase by accident.  The current
   value is 5, corresponding to the number of words of a sub-par
   passphrase.  You may want to set this value to 6 to be on the safe
   side.

   *Note:* There is no real point in setting this variable any lower (or
   higher) than 5-7.  You would either render the passphrase insecure
   by admitting smaller passphrases (useless), or create such
   ridiculously high-security passphrases that the weakest link in
   your security shifted elsewhere: /A fifth bolt on your front door
   won't do you any good if you keep your ground floor windows open./

#  LocalWords:  wordlist wordlists
